apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'kotlin-android-extensions'

Properties properties = new Properties()
properties.load(project.rootProject.file('local.properties').newDataInputStream())

def alias = properties.get('alias')
def _keyPassword = properties.get('keyPassword')
def _storePassword = properties.get('storePassword')
def keystorePath = properties.get('keystorePath')

def CHANNEL = System.getProperty("channel", "default")

android {
    compileSdkVersion COMPILE_SDK_VERSION as int
    buildToolsVersion BUILD_TOOLS_VERSION as String
    defaultConfig {
        applicationId "com.kinglloy.album"
        minSdkVersion MIN_SDK_VERSION as int
        targetSdkVersion TARGET_SDK_VERSION as int
        versionCode APP_VERSION_CODE as int
        versionName APP_VERSION_NAME as String

        multiDexEnabled true

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        ndk {
            abiFilters 'x86', 'armeabi', 'armeabi-v7a'
        }
    }
    signingConfigs {
        release {
            keyAlias alias
            keyPassword _keyPassword
            storeFile file(keystorePath)
            storePassword _storePassword
        }
    }
    buildTypes {
        debug {
            minifyEnabled false
            signingConfig signingConfigs.release
        }
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'),
                    'proguard-rules.pro', 'component-proguard.pro'

            signingConfig signingConfigs.release
        }
    }

    productFlavors {
        demo {
            buildConfigField("boolean", "DEMO_MODE", "true")
        }
        production {
            buildConfigField("boolean", "DEMO_MODE", "false")
        }
    }
    dexOptions {
        javaMaxHeapSize "4g"
    }
}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    compile "com.android.support:appcompat-v7:${SUPPORT_LIBRARY_VERSION}"
    compile "com.android.support:design:${SUPPORT_LIBRARY_VERSION}"
    compile "com.android.support:recyclerview-v7:${SUPPORT_LIBRARY_VERSION}"

    compile "com.google.code.gson:gson:${GSON_VERSION}"
    compile "com.squareup.okhttp3:okhttp:${OK_HTTP_VERSION}"
    compile "com.google.dagger:dagger:${DAGGER_VERSION}"
    compile "io.reactivex.rxjava2:rxjava:${RXJAVA_VERSION}"
    compile "io.reactivex.rxjava2:rxandroid:${RXANDROID_VERSION}"
    compile "com.github.bumptech.glide:glide:${GLIDE_VERSION}"

    compile "com.google.firebase:firebase-core:${FIRE_BASE_VERSION}"
    compile "com.google.firebase:firebase-crash:${FIRE_BASE_VERSION}"

    compile 'com.afollestad.material-dialogs:core:0.9.4.7'

    kapt "com.google.dagger:dagger-compiler:${DAGGER_VERSION}"

    compile 'com.android.support:multidex:1.0.1'

    compile project(':engine')
    demoCompile project(path: ':data', configuration: 'demoDebug')
    productionCompile project(path: ':data', configuration: 'productionRelease')

    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    testCompile 'junit:junit:4.12'

}

project.afterEvaluate {
    android.applicationVariants.all { variant ->
        variant.outputs.each { output ->
            def oldFile = output.outputFile

            output.outputFile = new File(oldFile.parent,
                    "LWA-${CHANNEL}.apk")
        }
    }
}

buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-android-extensions:${KOTLIN_VERSION}"
    }
}
apply plugin: 'com.google.gms.google-services'